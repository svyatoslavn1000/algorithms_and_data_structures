import les_6_task_1
# OS Ubuntu 20.04 LTS, 64 bit
# Python 3.8
# Рассмотрены три алгоритма поиска простых чисел:  простой перебор, решето Эратосфена и
#перебор с помощью уже определенных простых чисел. Победил методы перебора
# т.к. В методе Эратосфена присутствует объект set, и хотя последний выигрывает по быстродействию (дз 4),
#по объему памяти не отличается от первого.
# Результаты приведены для числа 1000
# Поиск простых чисел простым перебором.

# /usr/bin/python3.8 /home/sen/PycharmProjects/pythonProject/lessons/pythonProject/venv/include/les_6/points_a_b_c_d.py
# Введите натуральное число: 1000
# [2, 2, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]
# Объекты заняли всего 1528 байт
# Объекты класса <class 'int'> числом 2 заняли 56 байт
# Объекты класса <class 'list'> числом 1 заняли 1472 байт
# Введите верхнюю границу диапазона: 1000
# [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]
# Объекты заняли всего 34452 байт
# Объекты класса <class 'int'> числом 1 заняли 28 байт
# Объекты класса <class 'set'> числом 1 заняли 32984 байт
# Объекты класса <class 'list'> числом 1 заняли 1440 байт
# Введите натуральное число: 1000
# [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]
# Объекты заняли всего 1528 байт
# Объекты класса <class 'int'> числом 2 заняли 56 байт
# Объекты класса <class 'list'> числом 1 заняли 1472 байт


num = int(input("Введите натуральное число: "))
count = 1
simple1 = [2]

while count < num:
    count += 1
    for i in range(2, int(count ** 0.5) + 1):
        if count % i == 0:
            break
    else:
        simple1.append(count)
        count += 1
print(simple1)
test = les_6_task_1.Test_memory()
test.put_obj(num, count, simple1)
test.print_all()

#Поиск простых чисел с помощью решета Эратосфена
n = int(input("Введите верхнюю границу диапазона: "))
sieve = set(range(2, n+1))
simples = []
while sieve:
    prime = min(sieve)
    simples.append(prime)
    sieve -= set(range(prime, n+1, prime))
print(simples)

test = les_6_task_1.Test_memory()
test.put_obj(num, sieve, simples)
test.print_all()


#Оптимизированный метод перебора, для проверки простоты используются только числа и списка простых.
num = int(input("Введите натуральное число: "))
count = 1
simple2 = [2]

while count < num:
    count += 1
    for i in simple2:
        if count % i == 0:
            break
    else:
        simple2.append(count)
        count += 1
print(simple2)
test = les_6_task_1.Test_memory()
test.put_obj(num, count, simple2)
test.print_all()
